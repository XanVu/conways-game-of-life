{"version":3,"sources":["cell.js","organism.js","HtmlHandler.js","main.js","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["Cell","exports","default","isAlive","_classCallCheck","_classPrivateMethodInitSpec","_Cell_brand","_classPrivateFieldInitSpec","_isAlive","_nextState","_isUnderpopulated","_isOverpopulated","_isReproducing","_isUnchanged","_classPrivateFieldSet","_createClass","key","value","getIsAlive","_classPrivateFieldGet","getNextState","getIsUnderpopulated","getIsOverpopulated","getIsReproducing","getIsUnchanged","determineDevelopment","adjacentLivingCells","_assertClassBrand","_isSurviving","call","_reproducing","evolve","isUnchanged","_setIsUnchanged","_setIsAlive","bool","_setNextState","_setIsUnderpopulated","_setIsOverpopulated","_setIsReproducing","_isNotUnderpopulated","isNotUnderpopulated","_isNotOverpopulated","isNotOverpopulated","isReproducing","isSurviving","_cell","_interopRequireDefault","require","_Organism","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","protoProps","staticProps","t","_toPrimitive","r","e","toPrimitive","String","Number","n","has","arguments","Organism","getPreviousLivingCellsPerIteration","_previousLivingCellsPerIteration","_","getPreviousDeadCellsPerIteration","_previousDeadCellsPerIteration","getRepetitionCounter","_repetitionCounter","getRepetitionThreshold","_repetitionThreshold","getTable","_table","getSize","_size","getInterval","interval","_interval","getIteration","_iteration","getLivingCellPerIteration","_livingCellsPerIteration","getDeadCellPerIteration","_deadCellsPerIteration","getFatalitiesOfOverpopulation","_fatalitiesOfOverpopulation","getFatalitiesOfUnderpopulation","_fatalitiesOfUnderpopulation","getReproducedCells","_reproducedCells","getHasStarted","_hasStarted","getHasStopped","_hasStopped","getIsStable","_isStable","getIsRepeating","_isRepeating","setSize","size","setTable","table","setHasStarted","setStopped","setInterval","setIteration","_this$iteration","setIsAlive","setIsRepeating","setRepetitionCounter","_this$repetitionCount","resetRepetitionCounter","setPreviousLivingCellsPerIteration","number","setPreviousDeadCellsPerIteration","resetIterationStatsCounter","initTable","Array","from","startingLive","array","row","col","cell","_CreateCell","_setIterationStatsCounter","validateStock","livingAdjacentCells","_livingAdjacentCells","_updateStatsForCells","evolveGeneration","acc","_validateUnchangedState","setPreviousIterationStatsCounter","currentDeadCells","currentLivingCells","initEvolution","detectRepetition","previousDeadCells","previousLivingCells","_validateRepetitionCondition","x","Math","random","_this","adjacentCellCoordinates","_getAdjacentCellCoordinates","adjacentCells","map","coordinate","_getCellbyCoordinate","_calculateNumberOfLivingAdjacentCells","_this2","columns","index","_calculateValidIndex","rows","cartesianProduct","flatMap","column","filter","coordinateArray","_isIdentity","_mod","a","b","floor","identity","every","element","reduce","_this$fatalitiesOfOve","_this$fatalitiesOfUnd","_this$reproducedCells","_this$livingCellsPerI","_this$deadCellsPerIte","_main","_organism","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","toString","slice","name","test","iter","isArray","len","arr2","HtmlHandler","registerTabs","StatsTab","document","getElementById","RulesTab","DefinitionTab","stats","rules","definition","_addOnCLickEventListener","registerControls","startButton","stopButton","resetButton","addEventListener","Test","location","reload","initHtmlTable","querySelector","insertRow","c","insertCell","span","createElement","appendChild","_setColorOfSpan","setHtmlStatValues","updateHtmlSpanInTable","td","cells","childNodes","underpopulation","overpopulation","repoduction","currentLiving","currentDead","iteration","_addingStats","tab","style","display","_span$classList","classList","remove","apply","add","_span$classList2","text","textContent","_HtmlHandler","_regeneratorRuntime","hasOwnProperty","asyncIterator","u","toStringTag","define","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","self","args","err","undefined","_test","_callee","sleep","_callee$","_context","delay","setTimeout","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","protocol","ws","onmessage","event","JSON","parse","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","generated","js","console","clear","hmrApply","hmrAcceptRun","close","onclose","log","removeErrorOverlay","message","stack","overlay","createErrorOverlay","body","stackTrace","innerText","innerHTML","getParents","modules","parents","k","dep","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["export default class Cell {\r\n    #isAlive = false\r\n    #nextState = false\r\n\r\n    #isUnderpopulated = false\r\n    #isOverpopulated = false\r\n    #isReproducing = false\r\n    #isUnchanged = false\r\n \r\n    \r\n    constructor(isAlive){\r\n      this.#isAlive = isAlive\r\n    }\r\n    \r\n    getIsAlive(){\r\n      return this.#isAlive\r\n    }  \r\n    \r\n    getNextState(){\r\n      return this.#nextState\r\n    }\r\n\r\n    getIsUnderpopulated(){\r\n      return this.#isUnderpopulated\r\n    }\r\n\r\n    getIsOverpopulated(){\r\n      return this.#isOverpopulated\r\n    }\r\n\r\n    getIsReproducing(){\r\n      return this.#isReproducing\r\n    }\r\n\r\n    getIsUnchanged(){\r\n      return this.#isUnchanged\r\n    }\r\n\r\n    #setIsAlive(bool){\r\n      this.#isAlive = bool\r\n    }\r\n\r\n    #setNextState(bool){\r\n      this.#nextState = bool\r\n    }\r\n\r\n    #setIsUnderpopulated(bool){\r\n      this.#isUnderpopulated = bool\r\n    }\r\n\r\n    #setIsOverpopulated(bool){\r\n      this.#isOverpopulated = bool\r\n    }\r\n\r\n    #setIsReproducing(bool){\r\n      this.#isReproducing = bool\r\n    }\r\n\r\n    #setIsUnchanged(bool){\r\n      this.#isUnchanged = bool\r\n    }\r\n\r\n\r\n\r\n    #isNotUnderpopulated(adjacentLivingCells){\r\n      let isNotUnderpopulated = adjacentLivingCells >= 2  \r\n      this.#setIsUnderpopulated(!isNotUnderpopulated)\r\n      return isNotUnderpopulated\r\n    }\r\n\r\n    #isNotOverpopulated(adjacentLivingCells){\r\n      let isNotOverpopulated = adjacentLivingCells <= 3  \r\n      this.#setIsOverpopulated(!isNotOverpopulated)\r\n      return isNotOverpopulated\r\n    }\r\n\r\n    #reproducing(adjacentLivingCells){\r\n      let isReproducing = adjacentLivingCells == 3\r\n      this.#setIsReproducing(isReproducing)   \r\n      this.#setNextState(isReproducing)\r\n      return isReproducing\r\n    }\r\n\r\n    #isSurviving(adjacentLivingCells){    \r\n      let isSurviving =  this.#isNotUnderpopulated(adjacentLivingCells) && this.#isNotOverpopulated(adjacentLivingCells)\r\n      this.#setNextState(isSurviving)\r\n    }\r\n\r\n\r\n    determineDevelopment(adjacentLivingCells){\r\n      this.getIsAlive() ? this.#isSurviving(adjacentLivingCells) : this.#reproducing(adjacentLivingCells)\r\n    }\r\n\r\n    evolve(){\r\n      let isUnchanged = this.getIsAlive() == this.getNextState()\r\n      this.#setIsUnchanged(isUnchanged)\r\n      this.#setIsAlive(this.getNextState())\r\n    }\r\n  }","import Cell from \"./cell.js\";\r\n\r\nexport default class Organism {\r\n    static #table\r\n    //controls\r\n    static #size = 0\r\n    static #interval = 100\r\n    static #repetitionCounter = 0\r\n    static #repetitionThreshold = 5\r\n\r\n    //Stats\r\n    static #iteration = 0\r\n    static #livingCellsPerIteration = 0\r\n    static #deadCellsPerIteration = 0\r\n\r\n    static #fatalitiesOfOverpopulation = 0\r\n    static #fatalitiesOfUnderpopulation = 0\r\n    static #reproducedCells = 0\r\n\r\n    static #previousLivingCellsPerIteration = 0\r\n    static #previousDeadCellsPerIteration = 0\r\n\r\n    //Loop Cooditions\r\n    static #hasStarted = false\r\n    static #hasStopped = false\r\n    static #isStable = false\r\n    static #isAlive = true\r\n    static #isRepeating = false\r\n\r\n    static getPreviousLivingCellsPerIteration(){\r\n      return this.#previousLivingCellsPerIteration\r\n    }\r\n\r\n    static getPreviousDeadCellsPerIteration(){\r\n      return this.#previousDeadCellsPerIteration\r\n    }\r\n\r\n    static getRepetitionCounter(){\r\n      return this.#repetitionCounter\r\n    }\r\n\r\n    static getRepetitionThreshold(){\r\n      return this.#repetitionThreshold\r\n    }\r\n\r\n    static getTable(){\r\n      return this.#table\r\n    }\r\n\r\n    static getSize(){\r\n      return this.#size\r\n    }\r\n\r\n    static getInterval(){\r\n      return this.#interval\r\n    }\r\n\r\n    static getTable(){\r\n      return this.#table\r\n    }\r\n\r\n    static getIteration(){\r\n      return this.#iteration\r\n    }\r\n\r\n    static getLivingCellPerIteration(){\r\n      return this.#livingCellsPerIteration\r\n    }\r\n\r\n    static getDeadCellPerIteration(){\r\n      return this.#deadCellsPerIteration\r\n    }\r\n\r\n    static getFatalitiesOfOverpopulation(){\r\n      return this.#fatalitiesOfOverpopulation\r\n    }\r\n\r\n    static getFatalitiesOfUnderpopulation(){\r\n      return this.#fatalitiesOfUnderpopulation\r\n    }\r\n\r\n    static getReproducedCells(){\r\n      return this.#reproducedCells\r\n    }\r\n\r\n    static getHasStarted(){\r\n      return this.#hasStarted\r\n    }\r\n\r\n    static getHasStopped(){\r\n      return this.#hasStopped\r\n    }\r\n\r\n    static getIsStable(){\r\n      return this.#isStable\r\n    }\r\n\r\n    static getIsAlive(){\r\n      return this.#isAlive\r\n    }\r\n\r\n    static getIsRepeating(){\r\n      return this.#isRepeating\r\n    }\r\n\r\n    static setSize(size){\r\n       this.#size = size \r\n    }\r\n\r\n    static setTable(table){\r\n      this.#table = table \r\n    } \r\n\r\n    static getInterval(interval){\r\n      this.#interval = interval\r\n    }\r\n\r\n    static getHasStarted(){\r\n      return this.#hasStarted\r\n    }\r\n\r\n    static setHasStarted(){\r\n      this.#hasStarted = true\r\n    }\r\n\r\n    static setStopped(){\r\n      this.#hasStopped = true\r\n    }\r\n\r\n    static setInterval(interval){\r\n      this.#interval = interval\r\n    }\r\n\r\n    static setIteration(){\r\n     ++this.#iteration\r\n    }\r\n\r\n    static setIsAlive(bool){\r\n      this.#isAlive = bool\r\n    }\r\n\r\n    static setIsRepeating(bool){\r\n      this.#isRepeating = bool\r\n    }\r\n\r\n    static setRepetitionCounter(){\r\n      ++this.#repetitionCounter\r\n    }\r\n\r\n    static resetRepetitionCounter(){\r\n      this.#repetitionCounter = 0\r\n    }\r\n\r\n    static setPreviousLivingCellsPerIteration(number){\r\n      this.#previousLivingCellsPerIteration = number\r\n    }\r\n\r\n    static setPreviousDeadCellsPerIteration(number){\r\n      this.#previousDeadCellsPerIteration = number\r\n    }\r\n\r\n    static resetIterationStatsCounter(){\r\n      this.#deadCellsPerIteration = 0\r\n      this.#livingCellsPerIteration = 0\r\n    }\r\n\r\n    static initTable(){\r\n      let size = this.getSize()\r\n      let table =  Array.from(new Array(size), () => new Array(size))\r\n      this.setTable(table)\r\n    }\r\n\r\n    static startingLive(array){\r\n      for(var row = 0; row < array.length; row++){\r\n        for(var col = 0; col < array.length; col++){\r\n          let cell = this.#CreateCell()\r\n          array[row][col] = cell\r\n          this.#setIterationStatsCounter(cell)\r\n        }\r\n      }\r\n      return array\r\n    }\r\n\r\n    static #CreateCell(){\r\n      return (Math.random() > 0.5) ? new Cell(true) : new Cell(false)\r\n     }\r\n\r\n    static validateStock(array){\r\n      for(var row = 0; row < array.length; row++){\r\n        for(var col = 0; col < array.length; col++){\r\n            let cell = array[row][col]\r\n            let livingAdjacentCells = this.#livingAdjacentCells(row, col)\r\n            cell.determineDevelopment(livingAdjacentCells)\r\n            this.#updateStatsForCells(cell)\r\n      }\r\n    }\r\n  }\r\n\r\n  static #livingAdjacentCells(row, col){\r\n    let adjacentCellCoordinates = this.#getAdjacentCellCoordinates(row, col)\r\n    let adjacentCells = adjacentCellCoordinates.map(coordinate => this.#getCellbyCoordinate(coordinate))\r\n    return this.#calculateNumberOfLivingAdjacentCells(adjacentCells)\r\n  }\r\n\r\n  static #getAdjacentCellCoordinates(row, col){\r\n    let size = this.getSize()\r\n    let columns = Array((col - 1), col, ( col + 1)).map(index => this.#calculateValidIndex(index, size))\r\n    let rows = Array((row - 1), row, (row + 1)).map(index => this.#calculateValidIndex(index, size)) \r\n    let cartesianProduct = rows.flatMap(row => columns.map(column => Array(row, column)))\r\n    let adjacentCells = cartesianProduct.filter(coordinateArray => !this.#isIdentity(row, col, coordinateArray))\r\n    return adjacentCells\r\n    }\r\n\r\n    static #calculateValidIndex(index, size){\r\n      return this.#mod(index, size)\r\n     }\r\n  \r\n    static #mod(a,b){\r\n      return a - (Math.floor(a / b) * b)\r\n    }\r\n\r\n    static #isIdentity(row, col, array){\r\n      let identity = Array(row, col)\r\n      return array.every((element, index) => element === identity[index]);\r\n    }\r\n\r\n  static #getCellbyCoordinate(coordinate){\r\n    let row = coordinate[0]\r\n    let col = coordinate[1]\r\n    return this.#table[row][col]\r\n  }\r\n\r\n  static #calculateNumberOfLivingAdjacentCells(adjacentCells){\r\n    return adjacentCells.reduce((acc, cell) => {\r\n      return cell.getIsAlive() ? ++acc : acc}, 0);\r\n  }\r\n\r\n  static #updateStatsForCells(cell){\r\n    if(cell.getIsOverpopulated())\r\n      ++this.#fatalitiesOfOverpopulation\r\n\r\n    if(cell.getIsUnderpopulated())\r\n      ++this.#fatalitiesOfUnderpopulation  \r\n\r\n    if(cell.getIsReproducing())\r\n      ++this.#reproducedCells  \r\n  }\r\n  \r\n  static evolveGeneration(array){\r\n    let acc = true\r\n\r\n    for(var row = 0; row < array.length; row++){\r\n      for(var col = 0; col < array.length; col++){\r\n      const cell = this.#table[row][col]\r\n      cell.evolve()\r\n      this.#setIterationStatsCounter(cell)\r\n      acc =  this.#validateUnchangedState(acc, cell.getIsUnchanged())      \r\n      }\r\n    }  \r\n    this.#isStable = acc\r\n  }\r\n\r\n  static #setIterationStatsCounter(cell){\r\n    cell.getIsAlive() == true ? ++this.#livingCellsPerIteration : ++this.#deadCellsPerIteration\r\n  }\r\n\r\n  static setPreviousIterationStatsCounter(){\r\n    let currentDeadCells = this.getDeadCellPerIteration()\r\n    let currentLivingCells = this.getLivingCellPerIteration()\r\n\r\n    this.setPreviousLivingCellsPerIteration(currentLivingCells)\r\n    this.setPreviousDeadCellsPerIteration(currentDeadCells)\r\n  }\r\n\r\n  static #validateUnchangedState(acc, isUnchanged){\r\n    return acc && isUnchanged\r\n  }\r\n\r\n\r\n  static initEvolution(size){\r\n      this.setSize(size)\r\n      this.initTable()\r\n\r\n      let table = this.getTable()\r\n      return this.startingLive(table)\r\n  }\r\n\r\n static detectRepetition(){\r\n  let previousDeadCells = this.getPreviousDeadCellsPerIteration()\r\n  let previousLivingCells = this.getPreviousLivingCellsPerIteration()\r\n\r\n  let currentDeadCells = this.getDeadCellPerIteration()\r\n  let currentLivingCells = this.getLivingCellPerIteration()\r\n\r\n  previousDeadCells == currentDeadCells && previousLivingCells == currentLivingCells ? this.setRepetitionCounter() : this.resetRepetitionCounter()\r\n\r\n  this.#validateRepetitionCondition()\r\n }\r\n\r\n static #validateRepetitionCondition(){\r\n  if(this.getRepetitionCounter() > this.getRepetitionThreshold()){  \r\n    this.setIsRepeating(true)\r\n  }\r\n }\r\n\r\n static x(){\r\n  if(Organism.getLivingCellPerIteration() == 0){\r\n    Organism.setIsAlive(false)\r\n  }\r\n }\r\n\r\n}","import Test from \"./main\";\r\nimport Organism from \"./organism\";\r\n\r\nexport default class HtmlHandler {\r\n\r\n  static registerTabs(){\r\n        let StatsTab = document.getElementById(\"StatsTab\")\r\n        let RulesTab = document.getElementById(\"RulesTab\")\r\n        let DefinitionTab = document.getElementById(\"DefinitionTab\")\r\n\r\n        let stats = document.getElementById(\"Stats\")\r\n        let rules = document.getElementById(\"Rules\")\r\n        let definition = document.getElementById(\"Definition\")    \r\n       \r\n        this.#addOnCLickEventListener(StatsTab, stats)\r\n        this.#addOnCLickEventListener(RulesTab, rules)\r\n        this.#addOnCLickEventListener(DefinitionTab, definition)\r\n\r\n    }\r\n\r\n    static #addOnCLickEventListener(tab, element){\r\n        tab.addEventListener(\"click\", function(){\r\n            if(element.style.display === \"none\"){\r\n                element.style.display = \"block\" \r\n            }\r\n            else\r\n            element.style.display = \"none\"\r\n        })\r\n    }\r\n    \r\n   static registerControls(){\r\n        let startButton = document.getElementById(\"Start\")\r\n        let stopButton = document.getElementById(\"Stop\") \r\n        let resetButton = document.getElementById(\"Reset\")\r\n    \r\n\r\n        startButton.addEventListener(\"click\", function(){\r\n            Organism.setHasStarted(true)\r\n            Test.test()\r\n        }, false)\r\n    \r\n        stopButton.addEventListener(\"click\", function(){\r\n            Organism.setStopped(true) \r\n        }, false)\r\n\r\n        resetButton.addEventListener(\"click\", function(){\r\n            location.reload()\r\n        })\r\n    \r\n    }\r\n\r\n    static initHtmlTable(array, size) {\r\n        let table = document.querySelector(\"table\");\r\n    \r\n        for(var row = 0; row < size; row++){\r\n            let r = table.insertRow()\r\n         \r\n            for(var col = 0; col < size; col++){\r\n                let cell = array[row][col]\r\n                let c = r.insertCell()\r\n                let span = document.createElement(\"span\")             \r\n                c.appendChild(span)\r\n                this.#setColorOfSpan(span, cell)\r\n           }\r\n        }\r\n    \r\n        this.setHtmlStatValues()\r\n    }\r\n    \r\n      static updateHtmlSpanInTable(array){\r\n        for(var row = 0; row < array.length; row++){\r\n          for(var col = 0; col < array.length; col++){\r\n            let cell = array[row][col]\r\n    \r\n            let table = document.querySelector(\"table\")\r\n            let td = table.rows[row].cells[col]\r\n            let span = td.childNodes[0]\r\n    \r\n            this.#setColorOfSpan(span, cell)\r\n          }\r\n        }\r\n      }\r\n    \r\n      static #setColorOfSpan(span, cell){\r\n        if(cell.getIsAlive()){ \r\n            span.classList.remove(...span.classList)\r\n            span.classList.add(\"greenCircle\")\r\n          }\r\n          else{\r\n            span.classList.remove(...span.classList)\r\n            span.classList.add(\"blackCircle\")\r\n          }\r\n    }\r\n    \r\n    static setHtmlStatValues(){\r\n\r\n        let underpopulation = document.getElementById(\"underpopulation\")\r\n        let overpopulation = document.getElementById(\"overpopulation\")\r\n        let repoduction = document.getElementById(\"reproduction\")\r\n        let currentLiving = document.getElementById(\"currentLivingCells\")\r\n        let currentDead = document.getElementById(\"currentDeadCells\")\r\n        let iteration = document.getElementById(\"iteration\")\r\n\r\n        this.#addingStats(underpopulation, \"Cell died of Underpopulation: \" + Organism.getFatalitiesOfUnderpopulation()) \r\n        this.#addingStats(overpopulation, \"Cell died of Overpopulation: \" + Organism.getFatalitiesOfOverpopulation()) \r\n        this.#addingStats(repoduction, \"Cells reproduced: \" +  Organism.getReproducedCells())\r\n        this.#addingStats(currentLiving, \"Current Living Cells: \" + Organism.getLivingCellPerIteration()) \r\n        this.#addingStats(currentDead, \"Current Dead Cells: \" + Organism.getDeadCellPerIteration())   \r\n        this.#addingStats(iteration, \"Cell Iteration: \" + Organism.getIteration())\r\n    }\r\n\r\n    static #addingStats(element, text){\r\n        element.textContent = text\r\n    }\r\n}\r\n","'use strict';\r\nimport HtmlHandler from './HtmlHandler';\r\nimport Organism from './organism';\r\n\r\n\r\n    HtmlHandler.registerTabs()\r\n    HtmlHandler.registerControls()\r\n\r\n\r\n    let table = Organism.initEvolution(50)\r\n    HtmlHandler.initHtmlTable(table, 50)\r\n  \r\nexport default class Test {\r\n\r\n    static async test(){\r\n        let table = Organism.getTable()\r\n\r\n        const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\r\n\r\n        while(Organism.getIsAlive() && Organism.getHasStarted() && !Organism.getHasStopped() && !Organism.getIsStable() && !Organism.getIsRepeating()){   \r\n          \r\n          Organism.setPreviousIterationStatsCounter()\r\n          Organism.resetIterationStatsCounter();\r\n          \r\n          Organism.validateStock(table)\r\n          Organism.evolveGeneration(table)\r\n        \r\n          HtmlHandler.updateHtmlSpanInTable(table)\r\n          HtmlHandler.setHtmlStatValues()\r\n             \r\n          await sleep(Organism.getInterval())\r\n\r\n          Organism.detectRepetition()\r\n          Organism.setIteration()\r\n        }  \r\n    }\r\n}\r\n\r\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}