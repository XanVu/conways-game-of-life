{"version":3,"sources":["cell.js","organism.js","HtmlHandler.js","main.js","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["Cell","exports","default","isAlive","_classCallCheck","_classPrivateMethodInitSpec","_Cell_brand","_classPrivateFieldInitSpec","_isAlive","_nextState","_isUnderpopulated","_isOverpopulated","_isReproducing","_isUnchanged","_classPrivateFieldSet","_createClass","key","value","getIsAlive","_classPrivateFieldGet","getNextState","getIsUnderpopulated","getIsOverpopulated","getIsReproducing","getIsUnchanged","determineDevelopment","adjacentLivingCells","_assertClassBrand","_isSurviving","call","_reproducing","evolve","isUnchanged","_setIsUnchanged","_setIsAlive","bool","_setNextState","_setIsUnderpopulated","_setIsOverpopulated","_setIsReproducing","_isNotUnderpopulated","isNotUnderpopulated","_isNotOverpopulated","isNotOverpopulated","isReproducing","isSurviving","_cell","_interopRequireDefault","require","_Organism","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","protoProps","staticProps","t","_toPrimitive","r","e","toPrimitive","String","Number","n","has","arguments","Organism","getTable","_table","_","getSize","_size","getInterval","interval","_interval","getIteration","_iteration","getLivingCellPerIteration","_livingCellsPerIteration","getDeadCellPerIteration","_deadCellsPerIteration","getFatalitiesOfOverpopulation","_fatalitiesOfOverpopulation","getFatalitiesOfUnderpopulation","_fatalitiesOfUnderpopulation","getReproducedCells","_reproducedCells","getHasStarted","_hasStarted","getHasStopped","_hasStopped","getIsStable","_isStable","getIsRepeating","_isRepeating","setSize","size","setTable","table","setHasStarted","setStopped","setInterval","setIteration","_this$iteration","setIsAlive","setIsRepeating","initTable","Array","from","startingLive","array","row","col","cell","_CreateCell","_setIterationStatsCounter","validateStock","livingAdjacentCells","_livingAdjacentCells","_updateStatsForCells","evolveGeneration","acc","_validateUnchangedState","resetIterationStatsCounter","initEvolution","Math","random","_this","adjacentCellCoordinates","_getAdjacentCellCoordinates","adjacentCells","map","coordinate","_getCellbyCoordinate","_calculateNumberOfLivingAdjacentCells","_this2","columns","index","_calculateValidIndex","rows","cartesianProduct","flatMap","column","filter","coordinateArray","_isIdentity","_mod","a","b","floor","identity","every","element","reduce","_this$fatalitiesOfOve","_this$fatalitiesOfUnd","_this$reproducedCells","_this$livingCellsPerI","_this$deadCellsPerIte","_main","_organism","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","toString","slice","name","test","iter","isArray","len","arr2","HtmlHandler","registerTabs","StatsTab","document","getElementById","RulesTab","DefinitionTab","stats","rules","definition","_addOnCLickEventListener","registerControls","startButton","stopButton","resetButton","addEventListener","Test","location","reload","initHtmlTable","querySelector","insertRow","c","insertCell","span","createElement","appendChild","_setColorOfSpan","setHtmlStatValues","updateHtmlSpanInTable","td","cells","childNodes","underpopulation","overpopulation","repoduction","currentLiving","currentDead","iteration","_addingStats","tab","style","display","_span$classList","classList","remove","apply","add","_span$classList2","text","textContent","_HtmlHandler","_regeneratorRuntime","hasOwnProperty","asyncIterator","u","toStringTag","define","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","self","args","err","undefined","_test","_callee","repetitionCounter","sleep","x","x1","y1","_callee$","_context","delay","setTimeout","console","log","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","protocol","ws","onmessage","event","JSON","parse","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","generated","js","clear","hmrApply","hmrAcceptRun","close","onclose","removeErrorOverlay","message","stack","overlay","createErrorOverlay","body","stackTrace","innerText","innerHTML","getParents","modules","parents","k","dep","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["export default class Cell {\r\n    #isAlive = false\r\n    #nextState = false\r\n\r\n    #isUnderpopulated = false\r\n    #isOverpopulated = false\r\n    #isReproducing = false\r\n    #isUnchanged = false\r\n \r\n    \r\n    constructor(isAlive){\r\n      this.#isAlive = isAlive\r\n    }\r\n    \r\n    getIsAlive(){\r\n      return this.#isAlive\r\n    }  \r\n    \r\n    getNextState(){\r\n      return this.#nextState\r\n    }\r\n\r\n    getIsUnderpopulated(){\r\n      return this.#isUnderpopulated\r\n    }\r\n\r\n    getIsOverpopulated(){\r\n      return this.#isOverpopulated\r\n    }\r\n\r\n    getIsReproducing(){\r\n      return this.#isReproducing\r\n    }\r\n\r\n    getIsUnchanged(){\r\n      return this.#isUnchanged\r\n    }\r\n\r\n    #setIsAlive(bool){\r\n      this.#isAlive = bool\r\n    }\r\n\r\n    #setNextState(bool){\r\n      this.#nextState = bool\r\n    }\r\n\r\n    #setIsUnderpopulated(bool){\r\n      this.#isUnderpopulated = bool\r\n    }\r\n\r\n    #setIsOverpopulated(bool){\r\n      this.#isOverpopulated = bool\r\n    }\r\n\r\n    #setIsReproducing(bool){\r\n      this.#isReproducing = bool\r\n    }\r\n\r\n    #setIsUnchanged(bool){\r\n      this.#isUnchanged = bool\r\n    }\r\n\r\n\r\n\r\n    #isNotUnderpopulated(adjacentLivingCells){\r\n      let isNotUnderpopulated = adjacentLivingCells >= 2  \r\n      this.#setIsUnderpopulated(!isNotUnderpopulated)\r\n      return isNotUnderpopulated\r\n    }\r\n\r\n    #isNotOverpopulated(adjacentLivingCells){\r\n      let isNotOverpopulated = adjacentLivingCells <= 3  \r\n      this.#setIsOverpopulated(!isNotOverpopulated)\r\n      return isNotOverpopulated\r\n    }\r\n\r\n    #reproducing(adjacentLivingCells){\r\n      let isReproducing = adjacentLivingCells == 3\r\n      this.#setIsReproducing(isReproducing)   \r\n      this.#setNextState(isReproducing)\r\n      return isReproducing\r\n    }\r\n\r\n    #isSurviving(adjacentLivingCells){    \r\n      let isSurviving =  this.#isNotUnderpopulated(adjacentLivingCells) && this.#isNotOverpopulated(adjacentLivingCells)\r\n      this.#setNextState(isSurviving)\r\n    }\r\n\r\n\r\n    determineDevelopment(adjacentLivingCells){\r\n      this.getIsAlive() ? this.#isSurviving(adjacentLivingCells) : this.#reproducing(adjacentLivingCells)\r\n    }\r\n\r\n    evolve(){\r\n      let isUnchanged = this.getIsAlive() == this.getNextState()\r\n      this.#setIsUnchanged(isUnchanged)\r\n      this.#setIsAlive(this.getNextState())\r\n    }\r\n  }","import Cell from \"./cell.js\";\r\n\r\nexport default class Organism {\r\n    static #table\r\n    //controls\r\n    static #size = 0\r\n    static #interval = 100\r\n\r\n    //Stats\r\n    static #iteration = 0\r\n    static #livingCellsPerIteration = 0\r\n    static #deadCellsPerIteration = 0\r\n\r\n    static #fatalitiesOfOverpopulation = 0\r\n    static #fatalitiesOfUnderpopulation = 0\r\n    static #reproducedCells = 0\r\n\r\n    //Loop Cooditions\r\n    static #hasStarted = false\r\n    static #hasStopped = false\r\n    static #isStable = false\r\n    static #isAlive = true\r\n    static #isRepeating = false\r\n\r\n    static getTable(){\r\n      return this.#table\r\n    }\r\n\r\n    static getSize(){\r\n      return this.#size\r\n    }\r\n\r\n    static getInterval(){\r\n      return this.#interval\r\n    }\r\n\r\n    static getTable(){\r\n      return this.#table\r\n    }\r\n\r\n    static getIteration(){\r\n      return this.#iteration\r\n    }\r\n\r\n    static getLivingCellPerIteration(){\r\n      return this.#livingCellsPerIteration\r\n    }\r\n\r\n    static getDeadCellPerIteration(){\r\n      return this.#deadCellsPerIteration\r\n    }\r\n\r\n    static getFatalitiesOfOverpopulation(){\r\n      return this.#fatalitiesOfOverpopulation\r\n    }\r\n\r\n    static getFatalitiesOfUnderpopulation(){\r\n      return this.#fatalitiesOfUnderpopulation\r\n    }\r\n\r\n    static getReproducedCells(){\r\n      return this.#reproducedCells\r\n    }\r\n\r\n    static getHasStarted(){\r\n      return this.#hasStarted\r\n    }\r\n\r\n    static getHasStopped(){\r\n      return this.#hasStopped\r\n    }\r\n\r\n    static getIsStable(){\r\n      return this.#isStable\r\n    }\r\n\r\n    static getIsAlive(){\r\n      return this.#isAlive\r\n    }\r\n\r\n    static getIsRepeating(){\r\n      return this.#isRepeating\r\n    }\r\n\r\n    static setSize(size){\r\n       this.#size = size \r\n    }\r\n\r\n    static setTable(table){\r\n      this.#table = table \r\n    } \r\n\r\n    static getInterval(interval){\r\n      this.#interval = interval\r\n    }\r\n\r\n    static getHasStarted(){\r\n      return this.#hasStarted\r\n    }\r\n\r\n    static setHasStarted(){\r\n      this.#hasStarted = true\r\n    }\r\n\r\n    static setStopped(){\r\n      this.#hasStopped = true\r\n    }\r\n\r\n    static setInterval(interval){\r\n      this.#interval = interval\r\n    }\r\n\r\n    static setIteration(){\r\n     ++this.#iteration\r\n    }\r\n\r\n    static setIsAlive(bool){\r\n      this.#isAlive = bool\r\n    }\r\n\r\n    static setIsRepeating(bool){\r\n      this.#isRepeating = bool\r\n    }\r\n\r\n\r\n    static initTable(){\r\n      let size = this.getSize()\r\n      let table =  Array.from(new Array(size), () => new Array(size))\r\n      this.setTable(table)\r\n    }\r\n\r\n    static startingLive(array){\r\n      for(var row = 0; row < array.length; row++){\r\n        for(var col = 0; col < array.length; col++){\r\n          let cell = this.#CreateCell()\r\n          array[row][col] = cell\r\n          this.#setIterationStatsCounter(cell)\r\n        }\r\n      }\r\n      return array\r\n    }\r\n\r\n    static #CreateCell(){\r\n      return (Math.random() > 0.5) ? new Cell(true) : new Cell(false)\r\n     }\r\n\r\n    static validateStock(array){\r\n      for(var row = 0; row < array.length; row++){\r\n        for(var col = 0; col < array.length; col++){\r\n            let cell = array[row][col]\r\n            let livingAdjacentCells = this.#livingAdjacentCells(row, col)\r\n            cell.determineDevelopment(livingAdjacentCells)\r\n            this.#updateStatsForCells(cell)\r\n      }\r\n    }\r\n  }\r\n\r\n  static #livingAdjacentCells(row, col){\r\n    let adjacentCellCoordinates = this.#getAdjacentCellCoordinates(row, col)\r\n    let adjacentCells = adjacentCellCoordinates.map(coordinate => this.#getCellbyCoordinate(coordinate))\r\n    return this.#calculateNumberOfLivingAdjacentCells(adjacentCells)\r\n  }\r\n\r\n  static #getAdjacentCellCoordinates(row, col){\r\n    let size = this.getSize()\r\n    let columns = Array((col - 1), col, ( col + 1)).map(index => this.#calculateValidIndex(index, size))\r\n    let rows = Array((row - 1), row, (row + 1)).map(index => this.#calculateValidIndex(index, size)) \r\n    let cartesianProduct = rows.flatMap(row => columns.map(column => Array(row, column)))\r\n    let adjacentCells = cartesianProduct.filter(coordinateArray => !this.#isIdentity(row, col, coordinateArray))\r\n    return adjacentCells\r\n    }\r\n\r\n    static #calculateValidIndex(index, size){\r\n      return this.#mod(index, size)\r\n     }\r\n  \r\n    static #mod(a,b){\r\n      return a - (Math.floor(a / b) * b)\r\n    }\r\n\r\n    static #isIdentity(row, col, array){\r\n      let identity = Array(row, col)\r\n      return array.every((element, index) => element === identity[index]);\r\n    }\r\n\r\n  static #getCellbyCoordinate(coordinate){\r\n    let row = coordinate[0]\r\n    let col = coordinate[1]\r\n    return this.#table[row][col]\r\n  }\r\n\r\n  static #calculateNumberOfLivingAdjacentCells(adjacentCells){\r\n    return adjacentCells.reduce((acc, cell) => {\r\n      return cell.getIsAlive() ? ++acc : acc}, 0);\r\n  }\r\n\r\n  static #updateStatsForCells(cell){\r\n    if(cell.getIsOverpopulated())\r\n      ++this.#fatalitiesOfOverpopulation\r\n\r\n    if(cell.getIsUnderpopulated())\r\n      ++this.#fatalitiesOfUnderpopulation  \r\n\r\n    if(cell.getIsReproducing())\r\n      ++this.#reproducedCells  \r\n  }\r\n  \r\n  static evolveGeneration(array){\r\n    let acc = true\r\n\r\n    for(var row = 0; row < array.length; row++){\r\n      for(var col = 0; col < array.length; col++){\r\n      const cell = this.#table[row][col]\r\n      cell.evolve()\r\n      this.#setIterationStatsCounter(cell)\r\n      acc =  this.#validateUnchangedState(acc, cell.getIsUnchanged())      \r\n      }\r\n    }  \r\n\r\n    this.#isStable = acc\r\n  }\r\n\r\n  static #setIterationStatsCounter(cell){\r\n    cell.getIsAlive() == true ? ++this.#livingCellsPerIteration : ++this.#deadCellsPerIteration\r\n  }\r\n\r\n  static #validateUnchangedState(acc, isUnchanged){\r\n    return acc && isUnchanged\r\n  }\r\n\r\n  static resetIterationStatsCounter(){\r\n    this.#deadCellsPerIteration = 0\r\n    this.#livingCellsPerIteration = 0\r\n  }\r\n\r\n  static initEvolution(size){\r\n      this.setSize(size)\r\n      this.initTable()\r\n\r\n      let table = this.getTable()\r\n\r\n      return this.startingLive(table)\r\n  }\r\n}","import Test from \"./main\";\r\nimport Organism from \"./organism\";\r\n\r\nexport default class HtmlHandler {\r\n\r\n  static registerTabs(){\r\n        let StatsTab = document.getElementById(\"StatsTab\")\r\n        let RulesTab = document.getElementById(\"RulesTab\")\r\n        let DefinitionTab = document.getElementById(\"DefinitionTab\")\r\n\r\n        let stats = document.getElementById(\"Stats\")\r\n        let rules = document.getElementById(\"Rules\")\r\n        let definition = document.getElementById(\"Definition\")    \r\n       \r\n        this.#addOnCLickEventListener(StatsTab, stats)\r\n        this.#addOnCLickEventListener(RulesTab, rules)\r\n        this.#addOnCLickEventListener(DefinitionTab, definition)\r\n\r\n    }\r\n\r\n    static #addOnCLickEventListener(tab, element){\r\n        tab.addEventListener(\"click\", function(){\r\n            if(element.style.display === \"none\"){\r\n                element.style.display = \"block\" \r\n            }\r\n            else\r\n            element.style.display = \"none\"\r\n        })\r\n    }\r\n    \r\n   static registerControls(){\r\n        let startButton = document.getElementById(\"Start\")\r\n        let stopButton = document.getElementById(\"Stop\") \r\n        let resetButton = document.getElementById(\"Reset\")\r\n    \r\n\r\n        startButton.addEventListener(\"click\", function(){\r\n            Organism.setHasStarted(true)\r\n            Test.test()\r\n        }, false)\r\n    \r\n        stopButton.addEventListener(\"click\", function(){\r\n            Organism.setStopped(true) \r\n        }, false)\r\n\r\n        resetButton.addEventListener(\"click\", function(){\r\n            location.reload()\r\n        })\r\n    \r\n    }\r\n\r\n    static initHtmlTable(array, size) {\r\n        let table = document.querySelector(\"table\");\r\n    \r\n        for(var row = 0; row < size; row++){\r\n            let r = table.insertRow()\r\n         \r\n            for(var col = 0; col < size; col++){\r\n                let cell = array[row][col]\r\n                let c = r.insertCell()\r\n                let span = document.createElement(\"span\")             \r\n                c.appendChild(span)\r\n                this.#setColorOfSpan(span, cell)\r\n           }\r\n        }\r\n    \r\n        this.setHtmlStatValues()\r\n    }\r\n    \r\n      static updateHtmlSpanInTable(array){\r\n        for(var row = 0; row < array.length; row++){\r\n          for(var col = 0; col < array.length; col++){\r\n            let cell = array[row][col]\r\n    \r\n            let table = document.querySelector(\"table\")\r\n            let td = table.rows[row].cells[col]\r\n            let span = td.childNodes[0]\r\n    \r\n            this.#setColorOfSpan(span, cell)\r\n          }\r\n        }\r\n      }\r\n    \r\n      static #setColorOfSpan(span, cell){\r\n        if(cell.getIsAlive()){ \r\n            span.classList.remove(...span.classList)\r\n            span.classList.add(\"greenCircle\")\r\n          }\r\n          else{\r\n            span.classList.remove(...span.classList)\r\n            span.classList.add(\"blackCircle\")\r\n          }\r\n    }\r\n    \r\n    static setHtmlStatValues(){\r\n\r\n        let underpopulation = document.getElementById(\"underpopulation\")\r\n        let overpopulation = document.getElementById(\"overpopulation\")\r\n        let repoduction = document.getElementById(\"reproduction\")\r\n        let currentLiving = document.getElementById(\"currentLivingCells\")\r\n        let currentDead = document.getElementById(\"currentDeadCells\")\r\n        let iteration = document.getElementById(\"iteration\")\r\n\r\n        this.#addingStats(underpopulation, \"Cell died of Underpopulation: \" + Organism.getFatalitiesOfUnderpopulation()) \r\n        this.#addingStats(overpopulation, \"Cell died of Overpopulation: \" + Organism.getFatalitiesOfOverpopulation()) \r\n        this.#addingStats(repoduction, \"Cells reproduced: \" +  Organism.getReproducedCells())\r\n        this.#addingStats(currentLiving, \"Current Living Cells: \" + Organism.getLivingCellPerIteration()) \r\n        this.#addingStats(currentDead, \"Current Dead Cells: \" + Organism.getDeadCellPerIteration())   \r\n        this.#addingStats(iteration, \"Cell Iteration: \" + Organism.getIteration())\r\n    }\r\n\r\n    static #addingStats(element, text){\r\n        element.textContent = text\r\n    }\r\n}\r\n","'use strict';\r\nimport HtmlHandler from './HtmlHandler';\r\nimport Organism from './organism';\r\n\r\n\r\n    HtmlHandler.registerTabs()\r\n    HtmlHandler.registerControls()\r\n\r\n\r\n    let table = Organism.initEvolution(10)\r\n    HtmlHandler.initHtmlTable(table, 10)\r\n\r\n\r\n  \r\nexport default class Test {\r\n\r\n    static async test(){\r\n\r\n        let repetitionCounter = 0\r\n\r\n        const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\r\n\r\n        while(Organism.getIsAlive() && Organism.getHasStarted() && !Organism.getHasStopped() && !Organism.getIsStable() && !Organism.getIsRepeating()){   \r\n          let table = Organism.getTable()\r\n          \r\n          let x = Organism.getDeadCellPerIteration()\r\n          let y = Organism.getLivingCellPerIteration()\r\n          \r\n          Organism.validateStock(table)\r\n          Organism.evolveGeneration(table)\r\n        \r\n          if(Organism.getLivingCellPerIteration() == 0){\r\n            Organism.setIsRepeating(true)\r\n          }\r\n          \r\n          HtmlHandler.updateHtmlSpanInTable(table)\r\n          HtmlHandler.setHtmlStatValues()\r\n             \r\n          await sleep(Organism.getInterval())\r\n    \r\n          let x1 = Organism.getDeadCellPerIteration()\r\n          let y1 = Organism.getLivingCellPerIteration()  \r\n\r\n\r\n          console.log(\"dead be \" + x1)\r\n          console.log(\"dead : \" + x)\r\n          console.log(y1)\r\n          console.log(y)\r\n\r\n\r\n\r\n          if(x == x1 && y == y1){\r\n            ++repetitionCounter\r\n          }\r\n\r\n    \r\n\r\n          if(repetitionCounter > 3){\r\n            Organism.setIsRepeating(true)\r\n          }\r\n        \r\n          Organism.setIteration()\r\n          Organism.resetIterationStatsCounter();\r\n\r\n        }  \r\n    }\r\n}\r\n\r\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}