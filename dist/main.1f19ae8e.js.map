{"version":3,"sources":["cell.js","organism.js","main.js"],"names":["Cell","exports","default","isAlive","_classCallCheck","_classPrivateMethodInitSpec","_Cell_brand","_classPrivateFieldInitSpec","_isAlive","_nextState","_isUnderpopulated","_isOverpopulated","_isReproducing","_isUnchanged","_classPrivateFieldSet","_createClass","key","value","getIsAlive","_classPrivateFieldGet","getNextState","getIsUnderpopulated","getIsOverpopulated","getIsReproducing","getIsUnchanged","determineDevelopment","adjacentLivingCells","_assertClassBrand","_isSurviving","call","_reproducing","evolve","isUnchanged","_setIsUnchanged","_setIsAlive","bool","_setNextState","_setIsUnderpopulated","_setIsOverpopulated","_setIsReproducing","_isNotUnderpopulated","isNotUnderpopulated","_isNotOverpopulated","isNotOverpopulated","isReproducing","isSurviving","_cell","_interopRequireDefault","require","_Organism","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","minLen","_arrayLikeToArray","n","Object","toString","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","protoProps","staticProps","t","_toPrimitive","r","e","toPrimitive","String","Number","has","arguments","Organism","getTable","_table","_","getSize","_size","getInterval","interval","_interval","getIteration","_iteration","getLivingCellPerIteration","_livingCellsPerIteration","getDeadCellPerIteration","_deadCellsPerIteration","getFatalitiesOfOverpopulation","_fatalitiesOfOverpopulation","getFatalitiesOfUnderpopulation","_fatalitiesOfUnderpopulation","getReproducedCells","_reproducedCells","getHasStarted","_hasStarted","getHasStopped","_hasStopped","getIsStable","_isStable","setSize","size","setTable","table","setHasStarted","setStopped","setInterval","setIteration","_this$iteration","initTable","startingLive","array","row","col","cell","_CreateCell","_setIterationCounter","validateStock","livingAdjacentCells","_livingAdjacentCells","_updateStatsForCells","evolveGeneration","acc","_validateUnchangedState","initHtmlTable","document","querySelector","insertRow","c","insertCell","span","createElement","appendChild","_setColorOfSpan","setHtmlStatValues","updateHtmlSpanInTable","td","rows","cells","childNodes","getElementById","innerHTML","resetIterationCounter","Math","random","_this","adjacentCellCoordinates","_getAdjacentCellCoordinates","adjacentCells","map","coordinate","_getCellbyCoordinate","_calculateNumberOfLivingAdjacentCells","_this2","columns","index","_calculateValidIndex","cartesianProduct","flatMap","column","filter","coordinateArray","_isIdentity","_mod","a","b","floor","identity","every","element","reduce","_this$fatalitiesOfOve","_this$fatalitiesOfUnd","_this$reproducedCells","_this$livingCellsPerI","_this$deadCellsPerIte","_span$classList","classList","remove","apply","add","_span$classList2","_organism","_regeneratorRuntime","hasOwnProperty","asyncIterator","u","toStringTag","define","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","self","args","err","undefined","tab1","tab2","tab3","startButton","addEventListener","stopButton","resetButton","stats","rules","settings","style","display","_test","_callee","organismIsDead","sleep","_callee$","_context","delay","setTimeout"],"mappings":"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AAA,ECqCrB0S,KAAK,CAACG,IF7BU,CE6BL,CAACC,KF7BI9T,EE6BG,EF7BH,CE6BM,MAAM;AAChC,CAAC,EAAE,CF9BiBK,ACRKY,ICsCjB,CAAC,ADtCgB,EAgCzB,SAAAuF,SAAA,EDxBoB,ACwBH,ODxBGlG,WAAA;AEgCpB8S,IFhCoB7S,AEgChB,CAACgT,CDPH,OAAA5R,QCOmB,CAAC,OAAO,CFhCT,ACyBlB,CCO6B,ADxCd4E,MDQG/F,ECRK,EAiChB,ECOgC,EFhCrB,ACyBP,EDlCF,ACkCEiG,KDlCG,CCkCH,EAAAC,CAAA;ECQT,EF1CYnG,ACmChB,ECOOoT,KAAK,CAACE,KAAK,CAACC,OAAO,KF1CV,AE0Ce,MAAM,CF1CrBrT,CE0CsB,SF1CtB,EACH,KAAK;ECkCjB,EDlCiBF,AE0CVoT,KAAK,CAACE,KAAK,CAACC,OAAO,GAAG,IF1CZ,GE0CmB,IF1CnBpT,iBAAA,EAEE,KAAK;EEyCrB,CAAC,CFzCoBH,ACgCxBS,GAAA,ECWG2S,KAAK,CAACE,KAAK,CAACC,OAAO,EF3CE,CE2CC,MF3CDnT,AE2CO,gBF3CP,EACN,KAAK;AE2CxB,CAAC,EAAE,CF3CqBJ,AC+BvBU,ICYO,CAAC,ADZR,EAVD,SAAA0F,QAAA,EDrBwB,ACqBR,ODrBQ/F,cAAA,EACP,KAAK;AE4CtByS,IF5CsB9S,AE4ClB,CAACgT,CDvBH,OAAA5R,QCuBmB,CAAC,OAAO,CF5CP,ACqBpB,CCuB6B,ADhDd4E,MDIK1F,ECJG,EAyBhB,ECuBgC,EDvB5B,EAAA+F,EDrBS,EACP,CCoBF,EAAAF,CAAA,CDpBO;EE4ChB,EFxCF5F,ACiBF,ECuBO8S,QAAQ,CAACC,KAAK,CAACC,IFxCpB,CAAAtT,EEwC2B,KAAK,CFxChC,KEwCsC,CFxClC,CEwCmC,CFxCvBL,OAAO;EACzB,ACgBC,ECwBOyT,QAAQ,CAACC,KAAK,CAACC,OAAO,GAAG,OAAO;EFxCvC,AEyCG,CAAC,CDzBJ9S,GAAA,EDhBAD,AE2CG6S,QAAQ,CAACC,GF3CZ,CAAA7T,CE2CiB,CAAC8T,EF3ClB,KE2CyB,GAAG,MAAM;AACnC,CAAC,EAAE,CF5CF9S,ACgBAC,GDhBA,CE4CO,CAAC,AD5BR,EAsDD,SAAA4F,YAAmBC,QAAQ,EAAC;ACrBhCP,IFjDKtF,ECuEC8F,GDvED,EAED,ICqEE,CAAAL,CCtBE,ADsBF,CCtBGwB,EF/CLhH,ACqEES,KCtBU,CAAC,EAAE,CAAC,EF/ChB,EAAY,ICqEV,CAjFe4E,QAAQ,EAiFvB,IAAI,EAAaO,QAAQ;ACrB/B,IAAIqB,ADsBA,EDrEE,EE+CE,GAAG5B,EF/CLpF,eE+Ca,CAACwF,KF/Cd,CAAAnG,CE+CqB,CAAC,CAAC,KF/CvB,EAAO,IAAI;AEgDjB+F,EDqBK,EDpED,aE+CI,CAACoC,SAAS,CAAC,CAAC;AACpB,EFhDK,EEgDDN,ADoBCrH,GAAA,ECpBI,GAAGuF,iBAAQ,CAACC,QAAQ,CAAC,CAAC;AAC/BD,IFjDKvF,ACoEAC,GDpEA,ECoEA,EA9CD,MC2BI,CAAC2H,ED3BL5B,UC2BiB,CAACqB,ED3BlB,EAAqB,CC2BE,CAAC;AAC5B9B,IFlDKtF,ECuBC,GDvBD,EAED,ECqBEU,IC2BE,CAAC+H,EFhDLtI,UCqBE,CC2BgB,ADhEDmF,CCgEE8B,CFhDnB,EAAc,EEgDU,EAAEF,ADhED,EAqChB,EC2BqB,CAAC,CD3BlB,EAAAlB,UAAA,EAAAP,CAAA;AC2BkB,ID1B/B,EDrBE,GEqDahC,IFrDbvD,AEqDiBuD,CAAA,oBFrDjB,CAAAjE,UAAA,EAAO,IAAI;EEqDM,ADhClB,EDpBD,KEoDmBsT,KAAA,CAAA9G,KAAA,OAAA3G,SAAA;AAAA,EFpDlB,ECoBAtF,GAAA;ACgCkB,IFpDlBA,ACoBAC,GDpBA,EEoDkB8S,ADhClB,EAED,IC8BmB,KD9BnB7M,0BAAA,EAAkC;EC8Bf6M,EFpDlB9S,ECuBC,CC6BiB,EFpDlB,CEoDkB4R,CFlDnB,ECqBElR,ODrBFN,OEkDmB,GD7BjB,CAzCekF,QAAQ,CDoBzB,CCqBS,CDrBY,AEkDF8G,GD7BN,EAAAlG,cC6BM,GAAAgK,IAAA,CAAnB,ED7Ba,EAAAzK,CAAA,IC6BbsN,QAAA;IAAA,AD5BA,EDrBE,EEiDFC,KFjDE9S,SEiDF,EAAA+S,KAAA,EAAAzN,GFjDE,CAAA/F,EEiDF,eFjDE,EAAO,IAAI;ECqBZ,EDpBD,AEgDA,OAAA2M,mBAAA,GAAAM,IAAA,UAAAwG,SAAAC,QAAA;EFhDC,ECoBApT,EC4BD,CD5BC,iBC4BDoT,QAAA,CAAAxC,IAAA,GAAAwC,QAAA,CAAAhE,IAAA;IFhDCpP,ACoBAC,GDpBA,CEgDD,CD5BC,EAED,SAAAmG,wBAAA,EAAgC;IDtB/BnG,ECuBC,GDvBD,CEkDGgT,CFhDJ,ECqBEtS,ODrBFL,IEgDkB,GAAG,GD3BnB,CA7CeiF,CCwES,OFhD1B,ACxByB,EDwBL,ACqBX,IAAI,EAAAc,sBAAA,EAAAX,CAAA;IACb,EDrBE,IEmDIwN,GFnDJ/S,EEmDS,GAAG,SAAR+S,KAAKA,CAAIG,CFnDb,CAAA1T,GEmDkB,aFnDlB,EAAO,IAAI;ECqBZ,EDpBD,QEkDoB,OAAK,IAAI6Q,OAAO,CAAC,UAACnC,OAAO;EFlD5C,ECoBArO,GAAA,OC8B4C,OAAKsT,UAAU,CAACjF,OAAO,EAAEgF,KAAK,CAAC;IFlD3ErT,ACoBAC,GDpBA,ECoBA,EAED,CC4B4E,EAAC,MD5B7EqG,8BAAA,EAAsC;IDtBrCrG,ECuBC,GDvBD,CEkD4E,CFhD7E,ECqBEU,ODrBFJ,UCqBE,CAjDegF,MD4BjB,EAAkB,AC5BO,EAiDhB,IAAI,EAAAgB,2BAAA,EAAAb,CAAA;IACb,EDrBE,EE+C2E,KF/C3EvF,qBAAA,CAAAP,cAAA,EAAO,IAAI;ECqBZ,EDpBD,ME8C6E,MAGnE,CAACqT,cAAc,IAAI1N,iBAAQ,CAACqB,aAAa,CAAC,CAAC,IAAI,CAACrB,iBAAQ,CAACuB,aAAa,CAAC,CAAC,IAAI,CAACvB,iBAAQ,CAACyB,WAAW,CAAC,CAAC;EFjD5G,ECoBAhH,GAAA,KC6B4GoT,QAAA,CAAAhE,IAAA;IFjD5GpP,ACoBAC,GDpBA,ECoBA,EAED,CC2B6G,QD3B7GuG,+BAAA,EAAuC;IDtBtCvG,ECuBC,GDvBD,CEiD4G,CF/C7G,ECqBEU,ODrBFH,UCqBE,CArDe+E,IDgCjB,EAAgB,EChCS,EAqDhB,IAAI,EAAAkB,4BAAA,EAAAf,CAAA;IACb,EDrBE,IE+CQ2B,GF/CRlH,GE+Ca,GAAGoF,eF/ChB,CAAA1F,CE+CwB,CAAC2F,QAAQ,CAAC,CF/ClC,AE+CmC,EF/C5B,IAAI;ECqBZ,EDpBD,ME+CMD,iBAAQ,CAAC4C,aAAa,CAACd,MAAK,CAAC;EF/ClC,ECoBArH,GAAA,GC4BKuF,iBAAQ,CAACgD,gBAAgB,CAAClB,MAAK,CAAC;IFhDrCrH,ACoBAC,GDpBA,ECoBA,CC6BKsF,CD3BN,SAAAmB,OC2Bc,CAAC2C,WD3Bf,EAA2B,QC2BS,CAAChC,MAAK,CAAC;IFjD1CpH,ECuBC,GDvBD,CEkDKsF,CFGN,EC9BE5E,OD8BFF,OEHc,CAAC2I,ED3Bb,CAzDe7D,QAAQ,EDuFJ7E,AC9BZ,IC2BuB,AD3BnB,CC2BoB,CAAC,AD3BrBiG,aD8B2B,EAAC,CC9B5B,EAAAjB,CAAA;IACb,ED8BE,IAAI,AEFA,CFECxF,GEFEqF,OFEQ,CAAC,CAAC,GAAA5E,KEFF,CAACuF,WFEC,CAAA5G,WAAA,EAAG,AEFqB,CAAC,CAAC,EFEnB,EAAAsB,AEFuB,CAAC,EAAC,SFEzB,EAAAC,IAAA,CAAJ,IAAI,EAAcH,mBAAmB,IAAAC,iBAAA,CAAArB,WAAA,EAAI,IAAI,EAAAwB,YAAA,EAAAD,IAAA,CAAJ,IAAI,EAAcH,mBAAmB,CAAC;EC9BpG,ED+BD,QEFQuS,cAAc,GAAG,IAAI;EFE5B,EC/BAjT,GAAA,GC8BK;IFCLA,AC/BAC,GD+BA,EC/BA,CC8BMmT,CDJP,OCIO,CAAAhE,CDJPxI,GCIO,WDJP,EAAsB;IDKrB3G,ECJC,GDID,CEDM,CFGP,ECNEU,ICKUuS,GFCZnS,EEDiB,CAACwE,IFClB,EAAQ,CCNN,CArFeA,QAAQ,CC0FC,CAACM,ADLlB,IAAI,EAAAgB,KCKyB,CAAC,CAAC,CAAC,GDL5B,EAAAnB,CAAA;IACb,EDME,EEFuC,EFEnC1E,WAAW,GAAG,IAAI,CAACd,UAAU,CAAC,CAAC,IAAI,IAAI,CAACE,YAAY,CAAC,CAAC;ECN3D,IDOCO,IEDI4E,aFCJ,CAAAjG,GEDY,CAACmI,OFCb,KEDyB,CFCrB,AEDsB,CAAC,CFCvBxG,eAAA,EAAAJ,IAAA,CAAJ,IAAI,EAAiBG,WAAW;ICPjChB,EDQCW,CCRD,GCOK4E,aFCJ,CAAAjG,GEDY,CAACsK,OFCb,MAAI,EAAA1I,MED8B,CAAC,CAAC,GFChC,EAAAL,IAAA,CAAJ,IAAI,EAAa,IAAI,CAACT,YAAY,CAAC,CAAC;IACtC,ACTCH,KAAA,CCOsCmT,CD7BvC,OC6BuC,CAAAhE,CD7BvCtI,GC6BuC,WD7BvC,EAAsB;ED+BrB,IC9BC,IC4BqC,GD5BrCnG,iBAAA,CAjEe4E,QAAQ,EAiEhB,IAAI,EAAAwB,WAAA,EAAArB,CAAA;AD8BZ,IC7BD,IC2BuC;AFEtC,EC7BA,MC2BsC,CFEtCxE,YA3DWC,IAAI,EAAC;EACfrB,EC6BDE,GAAA,GC2BsC,OAAAoT,MFxDrC,CAAA5T,CEwDqC,CAAAsR,IAAA,EFxDrC,MAAI,EAAY3P,IAAI;AACtB,IC4BClB,EC2BsC,GD3BtC,EAED,SAAA+G,YAAA,EAAoB;AD9BnB,IEuDsC,EDxBrC,CCwBqCgM,EFvDtC5R,IC+BCT,CCwBqC,SFrDzBQ,IAAI,EAAC,CC6BjB,CArEeoE,QAAQ,EAqEhB,IAAI,EAAA0B,SAAA,EAAAvB,CAAA;ED5BX5F,AEoDqC,CAEtC,CDzBD,mBD7BE,CAAAL,UAAA,MAAI,EAAc0B,IAAI;AACxB,EEqDC,ADzBA,OCyBA4R,KAAA,CAAA9G,KAAA,OAAA3G,SAAA;AFrDA,AEqDA,IDzBAtF,GAAA,ED5BAqB,qBAEoBF,IAAI,EAAC;EACxBrB,ECyBDG,KAAA,EAED,SAAAiH,GD3BE,CAAAxH,IC2BayH,IAAI,EAAC,OD3BlB,MAAI,EAAqBhG,IAAI;AAC/B,MC2BGyE,KAAA,CAAAF,CAAA,GAAA/E,iBAAA,CAzEc4E,QAAQ,EAyEtB,IAAI,EAAS4B,IAAI;AD3BnB,IC4BD,KD5BC7F,oBAEmBH,IAAI,EAAC;EACvBrB,ACyBD,qBDzBC,CAAAH,gBAAA,MAAI,EAAoBwB,IAAI;AAC9B,ICwBCnB,GAAA;ADxBA,ICwBAC,KDxBAsB,ACwBA,EAED,SAAA6F,ODxBkBjG,ECwBFkG,EDxBM,EAAC,CCwBF,EAAC;EDvBpBvH,ICwBA2F,MAAA,CAAAC,CAAA,GAAA/E,MDxBA,CAAAf,UCwBA,CA7Ee2F,GDqDf,KCrDuB,CDqDnB,CCwBJ,CDxBsBpE,GCwBlB,CDxBsB,CCwBZkG,KAAK;ADvBrB,ICwBA;ADxBC,ECwBA,ODxBApG,gBAEeE,IAAI,EAAC;EACnBrB,ECqBDE,GAAA,gBDrBC,CAAAH,YAAA,MAAI,EAAgBsB,IAAI;AAC1B,ICoBClB,KAAA,EAUD,SAAAqH,cAAA,EAAsB;AD9BrB,MC+BCT,GD/BDrF,QC+BC,CAAAkE,CAAA,GAAA/E,QD3BmBD,SC2BnB,CAzFe6E,QAAQ,CD8De,CC2BtC,CD3BuC,GC2BnC,EAAe,IAAI;ED1BvB,EC2BF,ED3BM9D,mBAAmB,GAAGf,mBAAmB,IAAI,CAAC;EAClDC,AC0BD,iBD1BC,CAAArB,WAAA,MAAI,EAAA+B,oBAAA,EAAAR,IAAA,CAAJ,IAAI,EAAsB,CAACY,mBAAmB;EAC9C,ECyBDzB,GAAA,EDzBQyB,mBAAmB;AAC5B,ICwBCxB,KAAA,EAED,SAAAsH,WAAA,EAAmB;AD1BlB,MC2BCR,GD3BDrF,QC2BC,CAAAgE,CAAA,GAAA/E,ODzBkBD,UCyBlB,CA7Fe6E,QDoEsB,ACpEd,EDoEe,ACyBtC,IAAI,EAAe,IAAI;EDxBvB,ECyBF,EDzBM5D,kBAAkB,GAAGjB,mBAAmB,IAAI,CAAC;EACjDC,ACwBD,iBDxBC,CAAArB,WAAA,MAAI,EAAAgC,mBAAA,EAAAT,IAAA,CAAJ,IAAI,EAAqB,CAACc,kBAAkB;EAC5C,ECuBD3B,GAAA,EDvBQ2B,kBAAkB;AAC3B,ICsBC1B,KAAA,EAED,SAAAuH,YAAmB1B,QAAQ,EAAC;ADxB3B,MCyBCC,GDzBDjF,MCyBC,CAAA4E,CAAA,GAAA/E,EDvBWD,eCuBX,CAjGe6E,GD0Ee,EAAC,GC1ER,EAiGvB,IAAI,EAAaO,QAAQ;EDtBzB,ECuBF,EDvBMlE,aAAa,GAAGlB,mBAAmB,IAAI,CAAC;EAC5CC,ACsBD,iBDtBC,CAAArB,WAAA,MAAI,EAAAiC,iBAAA,EAAAV,IAAA,CAAJ,IAAI,EAAmBe,aAAa;EACpCjB,ECqBDX,GAAA,YDrBC,CAAAV,WAAA,MAAI,EAAA8B,aAAA,EAAAP,IAAA,CAAJ,IAAI,EAAee,aAAa;EAChC,ECoBD3B,KDpBQ2B,ACoBR,EAED,SAAA6F,EDtBsB,WCsBtB,EAAqB;ADrBrB,MCqBqB,IAAAC,eAAA;ADrBpB,MCsBAzB,GDtBArF,OCsBA,CAAA8E,CAAA,GAAA/E,CDpBYD,gBCoBZ,CArGgB6E,EDiFe,EAAC,ICjFR,EAqGtB,IAAI,GAAAmC,eAAA,GAAA/G,iBAAA,CArGU4E,QAAQ,EAqGtB,IAAI,EAAAU,UAAA,EAAAP,CAAA,IAAAgC,eAAA;EDnBL,ECoBF,EDpBM7F,WAAW,GAAIlB,iBAAA,CAAArB,WAAA,MAAI,EAAAkC,oBAAA,EAAAX,IAAA,CAAJ,IAAI,EAAsBH,mBAAmB,KAAAC,iBAAA,CAAArB,WAAA,EAAK,IAAI,EAAAoC,mBAAA,EAAAb,IAAA,CAAJ,IAAI,EAAqBH,mBAAmB,CAAC;EAClHC,ACmBD,iBDnBC,CAAArB,WAAA,MAAI,EAAA8B,aAAA,EAAAP,IAAA,CAAJ,IAAI,EAAegB,WAAW;AAChC,ICkBC7B,GAAA;IAAAC,KAAA,EAGD,SAAA0H,UAAA,EAAkB;MAChB,IAAIR,IAAI,GAAG,IAAI,CAACxB,OAAO,CAAC,CAAC;MACzB,IAAI0B,KAAK,GAAI7D,KAAK,CAACC,IAAI,CAAC,IAAID,KAAK,CAAC2D,IAAI,CAAC,EAAE;QAAA,OAAM,IAAI3D,KAAK,CAAC2D,IAAI,CAAC;MAAA,EAAC;MAC/D,IAAI,CAACC,QAAQ,CAACC,KAAK,CAAC;IACtB;EAAC;IAAArH,GAAA;IAAAC,KAAA,EAED,SAAA2H,aAAoBC,KAAK,EAAC;MACxB,KAAI,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGD,KAAK,CAAC/D,MAAM,EAAEgE,GAAG,EAAE,EAAC;QACzC,KAAI,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,KAAK,CAAC/D,MAAM,EAAEiE,GAAG,EAAE,EAAC;UACzC,IAAIC,IAAI,GAAArH,iBAAA,CAlHG4E,QAAQ,EAkHR,IAAI,EAAA0C,WAAA,EAAApH,IAAA,CAAJ,IAAI,CAAc;UAC7BgH,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGC,IAAI;UACtBrH,iBAAA,CApHW4E,QAAQ,EAoHnB,IAAI,EAAA2C,oBAAA,EAAArH,IAAA,CAAJ,IAAI,EAAsBmH,IAAI;QAChC;MACF;MACA,OAAOH,KAAK;IACd;EAAC;IAAA7H,GAAA;IAAAC,KAAA,EAMD,SAAAkI,cAAqBN,KAAK,EAAC;MACzB,KAAI,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGD,KAAK,CAAC/D,MAAM,EAAEgE,GAAG,EAAE,EAAC;QACzC,KAAI,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,KAAK,CAAC/D,MAAM,EAAEiE,GAAG,EAAE,EAAC;UACvC,IAAIC,IAAI,GAAGH,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC;UAC1B,IAAIK,mBAAmB,GAAAzH,iBAAA,CAlId4E,QAAQ,EAkIS,IAAI,EAAA8C,oBAAA,EAAAxH,IAAA,CAAJ,IAAI,EAAsBiH,GAAG,EAAEC,GAAG,CAAC;UAC7DC,IAAI,CAACvH,oBAAoB,CAAC2H,mBAAmB,CAAC;UAC9CzH,iBAAA,CApIS4E,QAAQ,EAoIjB,IAAI,EAAA+C,oBAAA,EAAAzH,IAAA,CAAJ,IAAI,EAAsBmH,IAAI;QACpC;MACF;IACF;EAAC;IAAAhI,GAAA;IAAAC,KAAA,EAoDD,SAAAsI,iBAAwBV,KAAK,EAAC;MAC5B,IAAIW,GAAG,GAAG,IAAI;MAEd,KAAI,IAAIV,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGD,KAAK,CAAC/D,MAAM,EAAEgE,GAAG,EAAE,EAAC;QACzC,KAAI,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,KAAK,CAAC/D,MAAM,EAAEiE,GAAG,EAAE,EAAC;UAC3C,IAAMC,IAAI,GAAGrH,iBAAA,CAhME4E,QAAQ,EAgMV,IAAI,EAAAE,MAAA,EAAAC,CAAA,CAAQoC,GAAG,CAAC,CAACC,GAAG,CAAC;UAClCC,IAAI,CAACjH,MAAM,CAAC,CAAC;UACbJ,iBAAA,CAlMe4E,QAAQ,EAkMvB,IAAI,EAAA2C,oBAAA,EAAArH,IAAA,CAAJ,IAAI,EAAsBmH,IAAI;UAC9BQ,GAAG,GAAA7H,iBAAA,CAnMY4E,QAAQ,EAmMhB,IAAI,EAAAkD,uBAAA,EAAA5H,IAAA,CAAJ,IAAI,EAAyB2H,GAAG,EAAER,IAAI,CAACxH,cAAc,CAAC,CAAC,CAAC;QAC/D;MACF;MAEAyG,SAAA,CAAAvB,CAAA,GAAA/E,iBAAA,CAvMiB4E,QAAQ,EAuMzB,IAAI,EAAaiD,GAAG;IACtB;EAAC;IAAAxI,GAAA;IAAAC,KAAA;IAWH;;IAEE,SAAAyI,cAAqBb,KAAK,EAAEV,IAAI,EAAE;MAChC,IAAIE,KAAK,GAAGsB,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAE3C,KAAI,IAAId,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,IAAI,EAAEW,GAAG,EAAE,EAAC;QAC/B,IAAI9C,CAAC,GAAGqC,KAAK,CAACwB,SAAS,CAAC,CAAC;QAEzB,KAAI,IAAId,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGZ,IAAI,EAAEY,GAAG,EAAE,EAAC;UAC/B,IAAIC,IAAI,GAAGH,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC;UAE1B,IAAIe,CAAC,GAAG9D,CAAC,CAAC+D,UAAU,CAAC,CAAC;UACtB,IAAIC,IAAI,GAAGL,QAAQ,CAACM,aAAa,CAAC,MAAM,CAAC;UACzCH,CAAC,CAACI,WAAW,CAACF,IAAI,CAAC;UACnBrI,iBAAA,CAjOS4E,QAAQ,EAiOjB,IAAI,EAAA4D,eAAA,EAAAtI,IAAA,CAAJ,IAAI,EAAiBmI,IAAI,EAAEhB,IAAI;QACpC;MACH;MAEA,IAAI,CAACoB,iBAAiB,CAAC,CAAC;IAC5B;EAAC;IAAApJ,GAAA;IAAAC,KAAA,EAEC,SAAAoJ,sBAA6BxB,KAAK,EAAC;MACjC,KAAI,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGD,KAAK,CAAC/D,MAAM,EAAEgE,GAAG,EAAE,EAAC;QACzC,KAAI,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,KAAK,CAAC/D,MAAM,EAAEiE,GAAG,EAAE,EAAC;UACzC,IAAIC,IAAI,GAAGH,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC;UAE1B,IAAIV,KAAK,GAAGsB,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;UAC3C,IAAIU,EAAE,GAAGjC,KAAK,CAACkC,IAAI,CAACzB,GAAG,CAAC,CAAC0B,KAAK,CAACzB,GAAG,CAAC;UACnC,IAAIiB,IAAI,GAAGM,EAAE,CAACG,UAAU,CAAC,CAAC,CAAC;UAE3B9I,iBAAA,CAjPa4E,QAAQ,EAiPrB,IAAI,EAAA4D,eAAA,EAAAtI,IAAA,CAAJ,IAAI,EAAiBmI,IAAI,EAAEhB,IAAI;QACjC;MACF;IACF;EAAC;IAAAhI,GAAA;IAAAC,KAAA,EAaH,SAAAmJ,kBAAA,EAA0B;MACxBT,QAAQ,CAACe,cAAc,CAAC,iBAAiB,CAAC,CAACC,SAAS,GAAG,gCAAgC,GAAGpE,QAAQ,CAACiB,8BAA8B,CAAC,CAAC;MACnImC,QAAQ,CAACe,cAAc,CAAC,gBAAgB,CAAC,CAACC,SAAS,GAAG,+BAA+B,GAAGpE,QAAQ,CAACe,6BAA6B,CAAC,CAAC;MAChIqC,QAAQ,CAACe,cAAc,CAAC,cAAc,CAAC,CAACC,SAAS,GAAG,oBAAoB,GAAIpE,QAAQ,CAACmB,kBAAkB,CAAC,CAAC;MACzGiC,QAAQ,CAACe,cAAc,CAAC,oBAAoB,CAAC,CAACC,SAAS,GAAG,wBAAwB,GAAGpE,QAAQ,CAACW,yBAAyB,CAAC,CAAC;MACzHyC,QAAQ,CAACe,cAAc,CAAC,kBAAkB,CAAC,CAACC,SAAS,GAAG,sBAAsB,GAAGpE,QAAQ,CAACa,uBAAuB,CAAC,CAAC;MACnHuC,QAAQ,CAACe,cAAc,CAAC,WAAW,CAAC,CAACC,SAAS,GAAG,kBAAkB,GAAGpE,QAAQ,CAACS,YAAY,CAAC,CAAC;IAC/F;EAAC;IAAAhG,GAAA;IAAAC,KAAA,EAEC,SAAA2J,sBAAA,EAA8B;MAC5BvD,sBAAA,CAAAX,CAAA,GAAA/E,iBAAA,CA3QiB4E,QAAQ,EA2QzB,IAAI,EAA0B,CAAC;MAC/BY,wBAAA,CAAAT,CAAA,GAAA/E,iBAAA,CA5QiB4E,QAAQ,EA4QzB,IAAI,EAA4B,CAAC;IACnC;EAAC;AAAA;AAAAtD,SAAA,GA7QkBsD,QAAQ;AAAA,SAAA0C,YAAA,EA0HL;EAClB,OAAQ4B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAI,IAAI9K,aAAI,CAAC,IAAI,CAAC,GAAG,IAAIA,aAAI,CAAC,KAAK,CAAC;AAChE;AAAC,SAAAqJ,qBAawBP,GAAG,EAAEC,GAAG,EAAC;EAAA,IAAAgC,KAAA;EACnC,IAAIC,uBAAuB,GAAArJ,iBAAA,CA1IV4E,SAAQ,EA0IK,IAAI,EAAA0E,2BAAA,EAAApJ,IAAA,CAAJ,IAAI,EAA6BiH,GAAG,EAAEC,GAAG,CAAC;EACxE,IAAImC,aAAa,GAAGF,uBAAuB,CAACG,GAAG,CAAC,UAAAC,UAAU;IAAA,OAAAzJ,iBAAA,CA3IzC4E,SAAQ,EA2IqCwE,KAAI,EAAAM,oBAAA,EAAAxJ,IAAA,CAAJkJ,KAAI,EAAsBK,UAAU;EAAA,CAAC,CAAC;EACpG,OAAAzJ,iBAAA,CA5IiB4E,SAAQ,EA4IlB,IAAI,EAAA+E,qCAAA,EAAAzJ,IAAA,CAAJ,IAAI,EAAuCqJ,aAAa;AACjE;AAAC,SAAAD,4BAEkCnC,GAAG,EAAEC,GAAG,EAAC;EAAA,IAAAwC,MAAA;EAC1C,IAAIpD,IAAI,GAAG,IAAI,CAACxB,OAAO,CAAC,CAAC;EACzB,IAAI6E,OAAO,GAAGhH,KAAK,CAAEuE,GAAG,GAAG,CAAC,EAAGA,GAAG,EAAIA,GAAG,GAAG,CAAE,CAAC,CAACoC,GAAG,CAAC,UAAAM,KAAK;IAAA,OAAA9J,iBAAA,CAjJxC4E,SAAQ,EAiJoCgF,MAAI,EAAAG,oBAAA,EAAA7J,IAAA,CAAJ0J,MAAI,EAAsBE,KAAK,EAAEtD,IAAI;EAAA,CAAC,CAAC;EACpG,IAAIoC,IAAI,GAAG/F,KAAK,CAAEsE,GAAG,GAAG,CAAC,EAAGA,GAAG,EAAGA,GAAG,GAAG,CAAE,CAAC,CAACqC,GAAG,CAAC,UAAAM,KAAK;IAAA,OAAA9J,iBAAA,CAlJpC4E,SAAQ,EAkJgCgF,MAAI,EAAAG,oBAAA,EAAA7J,IAAA,CAAJ0J,MAAI,EAAsBE,KAAK,EAAEtD,IAAI;EAAA,CAAC,CAAC;EAChG,IAAIwD,gBAAgB,GAAGpB,IAAI,CAACqB,OAAO,CAAC,UAAA9C,GAAG;IAAA,OAAI0C,OAAO,CAACL,GAAG,CAAC,UAAAU,MAAM;MAAA,OAAIrH,KAAK,CAACsE,GAAG,EAAE+C,MAAM,CAAC;IAAA,EAAC;EAAA,EAAC;EACrF,IAAIX,aAAa,GAAGS,gBAAgB,CAACG,MAAM,CAAC,UAAAC,eAAe;IAAA,OAAI,CAAApK,iBAAA,CApJ9C4E,SAAQ,EAoJuCgF,MAAI,EAAAS,WAAA,EAAAnK,IAAA,CAAJ0J,MAAI,EAAazC,GAAG,EAAEC,GAAG,EAAEgD,eAAe,CAAC;EAAA,EAAC;EAC5G,OAAOb,aAAa;AACpB;AAAC,SAAAQ,qBAE2BD,KAAK,EAAEtD,IAAI,EAAC;EACtC,OAAAxG,iBAAA,CAzJe4E,SAAQ,EAyJhB,IAAI,EAAA0F,IAAA,EAAApK,IAAA,CAAJ,IAAI,EAAM4J,KAAK,EAAEtD,IAAI;AAC7B;AAAC,SAAA8D,KAEUC,CAAC,EAACC,CAAC,EAAC;EACd,OAAOD,CAAC,GAAIrB,IAAI,CAACuB,KAAK,CAACF,CAAC,GAAGC,CAAC,CAAC,GAAGA,CAAE;AACpC;AAAC,SAAAH,YAEkBlD,GAAG,EAAEC,GAAG,EAAEF,KAAK,EAAC;EACjC,IAAIwD,QAAQ,GAAG7H,KAAK,CAACsE,GAAG,EAAEC,GAAG,CAAC;EAC9B,OAAOF,KAAK,CAACyD,KAAK,CAAC,UAACC,OAAO,EAAEd,KAAK;IAAA,OAAKc,OAAO,KAAKF,QAAQ,CAACZ,KAAK,CAAC;EAAA,EAAC;AACrE;AAAC,SAAAJ,qBAEyBD,UAAU,EAAC;EACrC,IAAItC,GAAG,GAAGsC,UAAU,CAAC,CAAC,CAAC;EACvB,IAAIrC,GAAG,GAAGqC,UAAU,CAAC,CAAC,CAAC;EACvB,OAAOzJ,iBAAA,CAxKU4E,SAAQ,EAwKlB,IAAI,EAAAE,MAAA,EAAAC,CAAA,CAAQoC,GAAG,CAAC,CAACC,GAAG,CAAC;AAC9B;AAAC,SAAAuC,sCAE4CJ,aAAa,EAAC;EACzD,OAAOA,aAAa,CAACsB,MAAM,CAAC,UAAChD,GAAG,EAAER,IAAI,EAAK;IACzC,OAAOA,IAAI,CAAC9H,UAAU,CAAC,CAAC,GAAG,EAAEsI,GAAG,GAAGA,GAAG;EAAA,CAAC,EAAE,CAAC,CAAC;AAC/C;AAAC,SAAAF,qBAE2BN,IAAI,EAAC;EAAA,IAAAyD,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EAC/B,IAAG3D,IAAI,CAAC1H,kBAAkB,CAAC,CAAC,EAC1BiG,2BAAA,CAAAb,CAAA,GAAA/E,iBAAA,CAlLe4E,SAAQ,EAkLrB,IAAI,GAAAkG,qBAAA,GAAA9K,iBAAA,CAlLS4E,SAAQ,EAkLrB,IAAI,EAAAgB,2BAAA,EAAAb,CAAA,IAAA+F,qBAAA;EAER,IAAGzD,IAAI,CAAC3H,mBAAmB,CAAC,CAAC,EAC3BoG,4BAAA,CAAAf,CAAA,GAAA/E,iBAAA,CArLe4E,SAAQ,EAqLrB,IAAI,GAAAmG,qBAAA,GAAA/K,iBAAA,CArLS4E,SAAQ,EAqLrB,IAAI,EAAAkB,4BAAA,EAAAf,CAAA,IAAAgG,qBAAA;EAER,IAAG1D,IAAI,CAACzH,gBAAgB,CAAC,CAAC,EACxBoG,gBAAA,CAAAjB,CAAA,GAAA/E,iBAAA,CAxLe4E,SAAQ,EAwLrB,IAAI,GAAAoG,qBAAA,GAAAhL,iBAAA,CAxLS4E,SAAQ,EAwLrB,IAAI,EAAAoB,gBAAA,EAAAjB,CAAA,IAAAiG,qBAAA;AACV;AAAC,SAAAzD,qBAiB2BF,IAAI,EAAC;EAAA,IAAA4D,qBAAA,EAAAC,qBAAA;EAC/B7D,IAAI,CAAC9H,UAAU,CAAC,CAAC,IAAI,IAAI,GAAAiG,wBAAA,CAAAT,CAAA,GAAA/E,iBAAA,CA3MR4E,SAAQ,EA2MK,IAAI,GAAAqG,qBAAA,GAAAjL,iBAAA,CA3MjB4E,SAAQ,EA2MK,IAAI,EAAAY,wBAAA,EAAAT,CAAA,IAAAkG,qBAAA,KAAAvF,sBAAA,CAAAX,CAAA,GAAA/E,iBAAA,CA3MjB4E,SAAQ,EA2MuC,IAAI,GAAAsG,qBAAA,GAAAlL,iBAAA,CA3MnD4E,SAAQ,EA2MuC,IAAI,EAAAc,sBAAA,EAAAX,CAAA,IAAAmG,qBAAA,EAAuB;AAC7F;AAAC,SAAApD,wBAE8BD,GAAG,EAAExH,WAAW,EAAC;EAC9C,OAAOwH,GAAG,IAAIxH,WAAW;AAC3B;AAAC,SAAAmI,gBAsCsBH,IAAI,EAAEhB,IAAI,EAAC;EAChC,IAAGA,IAAI,CAAC9H,UAAU,CAAC,CAAC,EAAC;IAAA,IAAA4L,eAAA;IACjB,CAAAA,eAAA,GAAA9C,IAAI,CAAC+C,SAAS,EAACC,MAAM,CAAAC,KAAA,CAAAH,eAAA,EAAApJ,kBAAA,CAAIsG,IAAI,CAAC+C,SAAS,EAAC;IACxC/C,IAAI,CAAC+C,SAAS,CAACG,GAAG,CAAC,aAAa,CAAC;EACnC,CAAC,MACG;IAAA,IAAAC,gBAAA;IACF,CAAAA,gBAAA,GAAAnD,IAAI,CAAC+C,SAAS,EAACC,MAAM,CAAAC,KAAA,CAAAE,gBAAA,EAAAzJ,kBAAA,CAAIsG,IAAI,CAAC+C,SAAS,EAAC;IACxC/C,IAAI,CAAC+C,SAAS,CAACG,GAAG,CAAC,aAAa,CAAC;EACnC;AACN;AAAC,IAAAzG,MAAA;EAAAC,CAAA;AAAA;AA7PG;AAAA,IAAAE,KAAA;EAAAF,CAAA,EACe;AAAC;AAAA,IAAAK,SAAA;EAAAL,CAAA,EACG;AAAG;AAEtB;AAAA,IAAAO,UAAA;EAAAP,CAAA,EACoB;AAAC;AAAA,IAAAS,wBAAA;EAAAT,CAAA,EACa;AAAC;AAAA,IAAAW,sBAAA;EAAAX,CAAA,EACH;AAAC;AAAA,IAAAa,2BAAA;EAAAb,CAAA,EAEI;AAAC;AAAA,IAAAe,4BAAA;EAAAf,CAAA,EACA;AAAC;AAAA,IAAAiB,gBAAA;EAAAjB,CAAA,EACb;AAAC;AAE3B;AAAA,IAAAmB,WAAA;EAAAnB,CAAA,EACqB;AAAK;AAAA,IAAAqB,WAAA;EAAArB,CAAA,EACL;AAAK;AAAA,IAAAuB,SAAA;EAAAvB,CAAA,EACP;AAAK","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["export default class Cell {\r\n    #isAlive = false\r\n    #nextState = false\r\n\r\n    #isUnderpopulated = false\r\n    #isOverpopulated = false\r\n    #isReproducing = false\r\n    #isUnchanged = false\r\n \r\n    \r\n    constructor(isAlive){\r\n      this.#isAlive = isAlive\r\n    }\r\n    \r\n    getIsAlive(){\r\n      return this.#isAlive\r\n    }  \r\n    \r\n    getNextState(){\r\n      return this.#nextState\r\n    }\r\n\r\n    getIsUnderpopulated(){\r\n      return this.#isUnderpopulated\r\n    }\r\n\r\n    getIsOverpopulated(){\r\n      return this.#isOverpopulated\r\n    }\r\n\r\n    getIsReproducing(){\r\n      return this.#isReproducing\r\n    }\r\n\r\n    getIsUnchanged(){\r\n      return this.#isUnchanged\r\n    }\r\n\r\n    #setIsAlive(bool){\r\n      this.#isAlive = bool\r\n    }\r\n\r\n    #setNextState(bool){\r\n      this.#nextState = bool\r\n    }\r\n\r\n    #setIsUnderpopulated(bool){\r\n      this.#isUnderpopulated = bool\r\n    }\r\n\r\n    #setIsOverpopulated(bool){\r\n      this.#isOverpopulated = bool\r\n    }\r\n\r\n    #setIsReproducing(bool){\r\n      this.#isReproducing = bool\r\n    }\r\n\r\n    #setIsUnchanged(bool){\r\n      this.#isUnchanged = bool\r\n    }\r\n\r\n\r\n\r\n    #isNotUnderpopulated(adjacentLivingCells){\r\n      let isNotUnderpopulated = adjacentLivingCells >= 2  \r\n      this.#setIsUnderpopulated(!isNotUnderpopulated)\r\n      return isNotUnderpopulated\r\n    }\r\n\r\n    #isNotOverpopulated(adjacentLivingCells){\r\n      let isNotOverpopulated = adjacentLivingCells <= 3  \r\n      this.#setIsOverpopulated(!isNotOverpopulated)\r\n      return isNotOverpopulated\r\n    }\r\n\r\n    #reproducing(adjacentLivingCells){\r\n      let isReproducing = adjacentLivingCells == 3\r\n      this.#setIsReproducing(isReproducing)   \r\n      this.#setNextState(isReproducing)\r\n      return isReproducing\r\n    }\r\n\r\n    #isSurviving(adjacentLivingCells){    \r\n      let isSurviving =  this.#isNotUnderpopulated(adjacentLivingCells) && this.#isNotOverpopulated(adjacentLivingCells)\r\n      this.#setNextState(isSurviving)\r\n    }\r\n\r\n\r\n    determineDevelopment(adjacentLivingCells){\r\n      this.getIsAlive() ? this.#isSurviving(adjacentLivingCells) : this.#reproducing(adjacentLivingCells)\r\n    }\r\n\r\n    evolve(){\r\n      let isUnchanged = this.getIsAlive() == this.getNextState()\r\n      this.#setIsUnchanged(isUnchanged)\r\n      this.#setIsAlive(this.getNextState())\r\n    }\r\n  }","import Cell from \"./cell.js\";\r\n\r\nexport default class Organism {\r\n    static #table\r\n    //controls\r\n    static #size = 0\r\n    static #interval = 100\r\n\r\n    //Stats\r\n    static #iteration = 0\r\n    static #livingCellsPerIteration = 0\r\n    static #deadCellsPerIteration = 0\r\n\r\n    static #fatalitiesOfOverpopulation = 0\r\n    static #fatalitiesOfUnderpopulation = 0\r\n    static #reproducedCells = 0\r\n\r\n    //Loop Cooditions\r\n    static #hasStarted = false\r\n    static #hasStopped = false\r\n    static #isStable = false\r\n\r\n    static getTable(){\r\n      return this.#table\r\n    }\r\n\r\n    static getSize(){\r\n      return this.#size\r\n    }\r\n\r\n    static getInterval(){\r\n      return this.#interval\r\n    }\r\n\r\n    static getTable(){\r\n      return this.#table\r\n    }\r\n\r\n    static getIteration(){\r\n      return this.#iteration\r\n    }\r\n\r\n    static getLivingCellPerIteration(){\r\n      return this.#livingCellsPerIteration\r\n    }\r\n\r\n    static getDeadCellPerIteration(){\r\n      return this.#deadCellsPerIteration\r\n    }\r\n\r\n    static getFatalitiesOfOverpopulation(){\r\n      return this.#fatalitiesOfOverpopulation\r\n    }\r\n\r\n    static getFatalitiesOfUnderpopulation(){\r\n      return this.#fatalitiesOfUnderpopulation\r\n    }\r\n\r\n    static getReproducedCells(){\r\n      return this.#reproducedCells\r\n    }\r\n\r\n    static getHasStarted(){\r\n      return this.#hasStarted\r\n    }\r\n\r\n    static getHasStopped(){\r\n      return this.#hasStopped\r\n    }\r\n\r\n    static getIsStable(){\r\n      return this.#isStable\r\n    }\r\n\r\n    static setSize(size){\r\n       this.#size = size \r\n    }\r\n\r\n    static setTable(table){\r\n      this.#table = table \r\n    } \r\n\r\n    static getInterval(interval){\r\n      this.#interval = interval\r\n    }\r\n\r\n    static getHasStarted(){\r\n      return this.#hasStarted\r\n    }\r\n\r\n    static setHasStarted(){\r\n      this.#hasStarted = true\r\n    }\r\n\r\n    static setStopped(){\r\n      this.#hasStopped = true\r\n    }\r\n\r\n    static setInterval(interval){\r\n      this.#interval = interval\r\n    }\r\n\r\n    static setIteration(){\r\n     ++this.#iteration\r\n    }\r\n\r\n\r\n    static initTable(){\r\n      let size = this.getSize()\r\n      let table =  Array.from(new Array(size), () => new Array(size))\r\n      this.setTable(table)\r\n    }\r\n\r\n    static startingLive(array){\r\n      for(var row = 0; row < array.length; row++){\r\n        for(var col = 0; col < array.length; col++){\r\n          let cell = this.#CreateCell()\r\n          array[row][col] = cell\r\n          this.#setIterationCounter(cell)\r\n        }\r\n      }\r\n      return array\r\n    }\r\n\r\n    static #CreateCell(){\r\n      return (Math.random() > 0.5) ? new Cell(true) : new Cell(false)\r\n     }\r\n\r\n    static validateStock(array){\r\n      for(var row = 0; row < array.length; row++){\r\n        for(var col = 0; col < array.length; col++){\r\n            let cell = array[row][col]\r\n            let livingAdjacentCells = this.#livingAdjacentCells(row, col)\r\n            cell.determineDevelopment(livingAdjacentCells)\r\n            this.#updateStatsForCells(cell)\r\n      }\r\n    }\r\n  }\r\n\r\n  static #livingAdjacentCells(row, col){\r\n    let adjacentCellCoordinates = this.#getAdjacentCellCoordinates(row, col)\r\n    let adjacentCells = adjacentCellCoordinates.map(coordinate => this.#getCellbyCoordinate(coordinate))\r\n    return this.#calculateNumberOfLivingAdjacentCells(adjacentCells)\r\n  }\r\n\r\n  static #getAdjacentCellCoordinates(row, col){\r\n    let size = this.getSize()\r\n    let columns = Array((col - 1), col, ( col + 1)).map(index => this.#calculateValidIndex(index, size))\r\n    let rows = Array((row - 1), row, (row + 1)).map(index => this.#calculateValidIndex(index, size)) \r\n    let cartesianProduct = rows.flatMap(row => columns.map(column => Array(row, column)))\r\n    let adjacentCells = cartesianProduct.filter(coordinateArray => !this.#isIdentity(row, col, coordinateArray))\r\n    return adjacentCells\r\n    }\r\n\r\n    static #calculateValidIndex(index, size){\r\n      return this.#mod(index, size)\r\n     }\r\n  \r\n    static #mod(a,b){\r\n      return a - (Math.floor(a / b) * b)\r\n    }\r\n\r\n    static #isIdentity(row, col, array){\r\n      let identity = Array(row, col)\r\n      return array.every((element, index) => element === identity[index]);\r\n    }\r\n\r\n  static #getCellbyCoordinate(coordinate){\r\n    let row = coordinate[0]\r\n    let col = coordinate[1]\r\n    return this.#table[row][col]\r\n  }\r\n\r\n  static #calculateNumberOfLivingAdjacentCells(adjacentCells){\r\n    return adjacentCells.reduce((acc, cell) => {\r\n      return cell.getIsAlive() ? ++acc : acc}, 0);\r\n  }\r\n\r\n  static #updateStatsForCells(cell){\r\n    if(cell.getIsOverpopulated())\r\n      ++this.#fatalitiesOfOverpopulation\r\n\r\n    if(cell.getIsUnderpopulated())\r\n      ++this.#fatalitiesOfUnderpopulation  \r\n\r\n    if(cell.getIsReproducing())\r\n      ++this.#reproducedCells  \r\n  }\r\n  \r\n  static evolveGeneration(array){\r\n    let acc = true\r\n\r\n    for(var row = 0; row < array.length; row++){\r\n      for(var col = 0; col < array.length; col++){\r\n      const cell = this.#table[row][col]\r\n      cell.evolve()\r\n      this.#setIterationCounter(cell)\r\n      acc =  this.#validateUnchangedState(acc, cell.getIsUnchanged())      \r\n      }\r\n    }  \r\n\r\n    this.#isStable = acc\r\n  }\r\n\r\n  static #setIterationCounter(cell){\r\n    cell.getIsAlive() == true ? ++this.#livingCellsPerIteration : ++this.#deadCellsPerIteration\r\n  }\r\n\r\n  static #validateUnchangedState(acc, isUnchanged){\r\n    return acc && isUnchanged\r\n  }\r\n\r\n\r\n//HTML STUFF\r\n\r\n  static initHtmlTable(array, size) {\r\n    let table = document.querySelector(\"table\");\r\n\r\n    for(var row = 0; row < size; row++){\r\n        let r = table.insertRow()\r\n     \r\n        for(var col = 0; col < size; col++){\r\n            let cell = array[row][col]\r\n        \r\n            let c = r.insertCell()\r\n            let span = document.createElement(\"span\")             \r\n            c.appendChild(span)\r\n            this.#setColorOfSpan(span, cell)\r\n       }\r\n    }\r\n\r\n    this.setHtmlStatValues()\r\n}\r\n\r\n  static updateHtmlSpanInTable(array){\r\n    for(var row = 0; row < array.length; row++){\r\n      for(var col = 0; col < array.length; col++){\r\n        let cell = array[row][col]\r\n\r\n        let table = document.querySelector(\"table\")\r\n        let td = table.rows[row].cells[col]\r\n        let span = td.childNodes[0]\r\n\r\n        this.#setColorOfSpan(span, cell)\r\n      }\r\n    }\r\n  }\r\n\r\n  static #setColorOfSpan(span, cell){\r\n    if(cell.getIsAlive()){ \r\n        span.classList.remove(...span.classList)\r\n        span.classList.add(\"greenCircle\")\r\n      }\r\n      else{\r\n        span.classList.remove(...span.classList)\r\n        span.classList.add(\"blackCircle\")\r\n      }\r\n}\r\n\r\nstatic setHtmlStatValues(){\r\n  document.getElementById(\"underpopulation\").innerHTML = \"Cell died of Underpopulation: \" + Organism.getFatalitiesOfUnderpopulation() \r\n  document.getElementById(\"overpopulation\").innerHTML = \"Cell died of Overpopulation: \" + Organism.getFatalitiesOfOverpopulation() \r\n  document.getElementById(\"reproduction\").innerHTML = \"Cells reproduced: \" +  Organism.getReproducedCells()\r\n  document.getElementById(\"currentLivingCells\").innerHTML = \"Current Living Cells: \" + Organism.getLivingCellPerIteration() \r\n  document.getElementById(\"currentDeadCells\").innerHTML = \"Current Dead Cells: \" + Organism.getDeadCellPerIteration()   \r\n  document.getElementById(\"iteration\").innerHTML = \"Cell Iteration: \" + Organism.getIteration()\r\n}\r\n\r\n  static resetIterationCounter(){\r\n    this.#deadCellsPerIteration = 0\r\n    this.#livingCellsPerIteration = 0\r\n  }\r\n}","'use strict';\nimport Organism from './organism';\n\n\n\n\n\n    let tab1 = document.getElementById(\"tab1\")\n    let tab2 = document.getElementById(\"tab2\")\n    let tab3 = document.getElementById(\"tab3\")\n   \n    let startButton = document.getElementById(\"start\")\n\n    startButton.addEventListener(\"click\", function(){\n        Organism.setHasStarted(true)\n        test()\n    }, false)\n\n\n    let stopButton = document.getElementById(\"stop\")\n\n    stopButton.addEventListener(\"click\", function(){\n        Organism.setStopped(true) \n    }, false)\n\n\n    let resetButton = document.getElementById(\"reset\")\n\n    let stats = document.getElementById(\"Stats\")\n    let rules = document.getElementById(\"Rules\")\n    let settings = document.getElementById(\"Definition\")\n\n\n\n    tab1.addEventListener(\"click\", function(){\n        if(stats.style.display === \"none\"){\n            stats.style.display = \"block\" \n        }\n        else\n        stats.style.display = \"none\"\n    }, false)\n\n    tab2.addEventListener(\"click\", function(){\n        if(rules.style.display === \"none\"){\n            rules.style.display = \"block\" \n        }\n        else\n        rules.style.display = \"none\"\n    }, false)\n\n    tab3.addEventListener(\"click\", function(){\n        if(settings.style.display === \"none\"){\n            settings.style.display = \"block\" \n        }\n        else\n        settings.style.display = \"none\"\n    }, false)\n    \n\n\n    \nOrganism.setSize(10)\nlet size = Organism.getSize()\nOrganism.initTable()    \nlet table = Organism.getTable()\nOrganism.startingLive(table)\nOrganism.initHtmlTable(table, size)\n\n\n  \n\n\n    async function test(){\n\n    var organismIsDead = false\n    \n    \n\n    const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n    \n\n        while(!organismIsDead && Organism.getHasStarted() && !Organism.getHasStopped() && !Organism.getIsStable()){   \n          let table = Organism.getTable()\n          Organism.validateStock(table)\n          Organism.evolveGeneration(table)\n          Organism.updateHtmlSpanInTable(table)\n          Organism.setHtmlStatValues()\n    \n          if(Organism.getLivingCellPerIteration() == 0){\n            organismIsDead = true\n          }\n          \n          await sleep(Organism.getInterval())\n    \n          Organism.setIteration()\n          Organism.resetIterationCounter();\n        }  \n    }\n\n\n"]}